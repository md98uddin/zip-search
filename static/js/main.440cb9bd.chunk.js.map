{"version":3,"sources":["components/Navbar.jsx","components/ZipInput.jsx","components/CitiesCard.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","title","cities","zip","className","style","textAlign","href","color","letterSpacing","fontSize","marginRight","display","marginLeft","length","ZipInput","onChange","onSubmit","marginTop","placeholder","id","height","onClick","e","marginBottom","CitiesCard","map","city","key","RecordNumber","City","Country","State","Lat","Long","EstimatedPopulation","TotalWages","App","props","handleChange","setState","target","value","onSubmitZip","a","fetchCities","state","Axios","get","then","res","data","catch","error","this","console","log","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.440cb9bd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst Navbar = ({ title, cities, zip }) => {\r\n  return (\r\n    <nav\r\n      className=\"navbar navbar-light bg-primary\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <a\r\n        className=\"navbar-brand\"\r\n        href=\"#\"\r\n        style={{ color: \"white\", letterSpacing: 2 }}\r\n      >\r\n        {title}\r\n      </a>\r\n      <p\r\n        style={{\r\n          color: \"white\",\r\n          fontSize: 17,\r\n          marginRight: 100,\r\n          display: \"block\",\r\n        }}\r\n      >\r\n        Zip {zip && zip}\r\n        <span style={{ marginLeft: 50 }}>\r\n          Matches {cities && cities !== \"no result\" && cities.length}\r\n        </span>\r\n      </p>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nconst ZipInput = ({ onChange, onSubmit }) => {\r\n  return (\r\n    <div className=\"input-form\" style={{ marginLeft: \"38%\", marginTop: \"2vh\" }}>\r\n      <label style={{ marginRight: 5 }}>Zip Code</label>\r\n      <input\r\n        placeholder=\"Type in a zipcode\"\r\n        onChange={onChange}\r\n        id=\"zip\"\r\n        style={{\r\n          height: 40,\r\n        }}\r\n      />\r\n      <button\r\n        className=\"btn btn-primary\"\r\n        onClick={(e) => onSubmit(e)}\r\n        style={{ marginLeft: 5, height: 40, marginBottom: 5 }}\r\n      >\r\n        Search\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ZipInput;\r\n","import React from \"react\";\r\n\r\nconst CitiesCard = ({ cities }) => {\r\n  return cities ? (\r\n    <div className=\"container\">\r\n      {cities !== \"no results\" ? (\r\n        <div className=\"card-container\">\r\n          {cities.map((city) => (\r\n            <div className=\"card\" key={city.RecordNumber}>\r\n              <h5 className=\"card-header\">{`${city.City}, ${city.Country}`}</h5>\r\n              <div className=\"card-body\">\r\n                <p className=\"card-text\">State:{city.State}</p>\r\n                <p className=\"card-text\">\r\n                  Location: ({city.Lat}, {city.Long})\r\n                </p>\r\n                <p className=\"card-text\">\r\n                  Population (estimate): {city.EstimatedPopulation}\r\n                </p>\r\n                <p className=\"card-text\">Total Wages: {city.TotalWages}</p>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <div className=\"card-header\">\r\n          <h5>No Results</h5>\r\n        </div>\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <div className=\"container card-header\">\r\n      <h5>Enter A Zip to See Matching Cities</h5>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CitiesCard;\r\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport ZipInput from \"./components/ZipInput\";\nimport CitiesCard from \"./components/CitiesCard\";\nimport Axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cities: null,\n      zip: null,\n    };\n  }\n\n  async componentDidMount() {\n    if (this.state.zip) {\n      return this.fetchCities(this.state.zip);\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  onSubmitZip = async (e) => {\n    return this.fetchCities(this.state.zip);\n  };\n\n  fetchCities = (zip) => {\n    Axios.get(`http://ctp-zip-api.herokuapp.com/zip/${zip}`)\n      .then((res) => {\n        if (res.data)\n          this.setState({\n            cities: res.data,\n          });\n      })\n      .catch((error) => {\n        this.setState({\n          cities: \"no results\",\n        });\n      });\n  };\n\n  render() {\n    console.log(\"cities\", this.state.cities);\n    console.log(\"zip\", this.state.zip);\n\n    return (\n      <React.Fragment>\n        <Navbar\n          title=\"ZipSearch\"\n          cities={this.state.cities}\n          zip={this.state.zip}\n        />\n        <ZipInput onChange={this.handleChange} onSubmit={this.onSubmitZip} />\n        <CitiesCard cities={this.state.cities} />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}